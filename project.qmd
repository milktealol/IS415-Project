---
title: "EDA"
date: "28 February 2023"
date-modified: "`r Sys.Date()`"
author: "Daniel Chng, Leon Tan & Zoe Chia "
format: html
execute:
  eval: true
  echo: true
  message: false
  warning: false
editor: visual
---

```{r}
# Import Packages
pacman::p_load(sf, tmap, tidyverse, sfdep, readxl, Kendall, plotly, plyr, SpatialAcc, ggstatsplot, reshape2, fca, sp, caret, stplanr, broom)
```

```{r}
# Import MPSZ
mpsz <- st_read(dsn = "data/geospatial", layer = "MPSZ-2019")
```

```{r}
mpsz <- st_transform(mpsz, 3414)
```

```{r}
write_rds(mpsz, "data/model/mpsz.rds")
```

```{r}
# Import MRT Stations
mrt <- st_read(dsn = "data/geospatial", layer = "RapidTransitSystemStation")

mrt_sf <- st_transform(mrt, 3414)
```

```{r}
mrt_sf <- mrt_sf %>%
  filter(str_detect(mrt_sf$STN_NAM_DE, "MRT STATION|LRT STATION")) %>%
  select(c(4, 3, 5))
```

```{r}
write_rds(mrt_sf, "data/model/mrt_sf.rds")
```

```{r}
# MRT Rail Line
rail <- st_read(dsn = "data/geospatial", layer = "G_MP14_RAIL_LI")

rail_sf <- st_transform(rail, 3414)
```

```{r}
# Tourism
tourism_sf <- st_read(dsn = "data/geospatial", layer = "TOURISM")
# Assign EPSG Code
tourism_sf <- st_transform(tourism_sf, 3414) %>%
  select(c(6, 10, 20))
```

```{r}
write_rds(tourism_sf, "data/model/tourism_sf.rds")
```

```{r}
# Shopping Malls
shopping <- read.csv("data/geospatial/mall_coordinates.csv")

shopping <- shopping %>%
  select(name, latitude, longitude)

glimpse(shopping)
```

```{r}
shopping_sf <- st_as_sf(shopping,
                              coords = c("longitude",
                                         "latitude"),
                              crs = 4326) %>%
  st_transform(crs = 3414)
```

```{r}
write_rds(shopping_sf, "data/model/shopping_sf.rds")
```

```{r}
# Hexagon for Map
hexagons <- st_read(dsn = "data/geospatial", layer = "hexagons")

hexagons_sf <- st_transform(hexagons, 3414)
```

```{r}
write_rds(hexagons_sf, "data/model/hexagons_sf.rds")
```

```{r}
# HDB Population by Geographical Location
hdb <- read.csv("data/aspatial/hdb-resident-population-by-geographical-distribution.csv")
```

```{r}
# Filter out 2018 data
hdb <- filter(hdb, shs_year == "2018")
```

```{r}
write_rds(hdb, "data/model/hdb.rds")
```

```{r}
tmap_mode('view')
tmap_options(check.and.fix = TRUE) +
tm_shape(mpsz) +
  tm_polygons() +
tm_shape(mrt_sf) +
  tm_dots(alph=0.5, size=0.01)+
  tm_view(set.zoom.limits = c(11,14))
```

```{r}
mpsz_hdb <- left_join(mpsz, hdb, by = c("PLN_AREA_N" = "town_estate"))
```

```{r}
# Population Density
tmap_mode('view')
tm_shape(mpsz_hdb) +
  tm_fill("number")
```

```{r}
# MRT vs Population Density
tmap_mode('view')
tm_shape(mpsz_hdb) +
  tm_fill("number") +
tm_shape(mrt_sf) +
  tm_dots(alph=0.5, size=0.01)+
  tm_view(set.zoom.limits = c(11,14))
```

```{r}
# Population Data 2022
popdata <- read_csv("data/aspatial/respopagesexfa2022.csv")
```

```{r}
popdata2022 <- popdata %>%
  spread(AG, Pop) %>%
  mutate(YOUNG = `0_to_4`+`5_to_9`+`10_to_14`+
`15_to_19`+`20_to_24`) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[9:13])+
rowSums(.[15:17]))%>%
mutate(`AGED`=rowSums(.[18:22])) %>%
mutate(`TOTAL`=rowSums(.[5:22])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
mutate_at(.vars = vars(PA, SZ), toupper) %>%
select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

```{r}
popdata2022 <- popdata2022 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = funs(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

```{r}
write_rds(popdata2022, "data/model/popdata2022.rds")
```

```{r}
mpsz_popdata2022 <- left_join(mpsz, popdata2022, by = c("SUBZONE_N" = "SZ"))
```

```{r}
write_rds(mpsz_popdata2022, "data/model/mpsz_popdata2022.rds")
```

```{r}
summary(mpsz_popdata2022$DEPENDENCY)
```

```{r}
# MRT vs Population Density
tmap_mode('view')
tm_shape(mpsz_popdata2022) +
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(lwd = 0.1,  alpha = 1) +
tm_shape(rail_sf) +
  tm_lines(lty = "solid",
           scale = 1) +
tm_shape(mrt_sf) +
  tm_dots(alph=0.5, size=0.07)+
  tm_view(set.zoom.limits = c(11,14))
```

```{r}
# MRT vs Tourism
tmap_mode('view')
tm_shape(tourism_sf) +
  tm_dots(size = 0.1, col = 'yellow') +
tm_shape(rail_sf) +
  tm_lines(lty = "solid",
           scale = 1) +
tm_shape(mrt_sf) +
  tm_dots(alph=0.5, size=0.07)+
  tm_view(set.zoom.limits = c(11,14))
```

```{r}
# MRT vs Shopping Malls
tmap_mode('view')
tm_shape(shopping_sf) +
  tm_dots(size = 0.1, col = 'yellow') +
tm_shape(rail_sf) +
  tm_lines(lty = "solid",
           scale = 1) +
tm_shape(mrt_sf) +
  tm_dots(alph=0.5, size=0.07)+
  tm_view(set.zoom.limits = c(11,14))
```

```{r}
st_make_grid(mrt_sf)
```

```{r}
hexagons <- hexagons %>%
  select(fid) %>%
  mutate(capacity = 100)
```

```{r}
tourism_sf <- tourism_sf %>%
  select(OBJECTID) %>%
  mutate(demand = 100)
```

```{r}
mrt_coords <- st_coordinates(mrt_sf)
```

```{r}
tourism_coord <- st_coordinates(tourism_sf)
```

```{r}
EucMatrix <- SpatialAcc::distance(mrt_coords,
                                  tourism_coord,
                                  type = "euclidean")
```

```{r}
EucMatrix_km <- as.matrix(EucMatrix/1000)
```

```{r}
mpsz_new <- mpsz[order(mpsz$SUBZONE_C),]
```

```{r}
mpsz_sp <- as(mpsz_new, "Spatial")
```

```{r}
dist <- spDists(mpsz_sp)
```

```{r}
sz_names <- mpsz$SUBZONE_C
```

```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)
```

```{r}
distPair <- melt(dist)
head(distPair, 10)
```

```{r}
distPair %>%
  filter(value > 0) %>%
  summary()
```

```{r}
acc_Hansen <- data.frame(ac(mrt_sf$capacity,
                            tourism_sf$demand,
                            EucMatrix_km,
                            d0 = 50,
                            power = 2,
                            family = "Hansen"))
```

```{r}
colnames(acc_Hansen) <- "accHansen"
```

```{r}
acc_Hansen <- as_tibble(acc_Hansen)
```

```{r}
hexagon_Hansen <- bind_cols(mrt_sf, acc_Hansen)
```

```{r}
mapex <- st_bbox(mrt_hexagon)
```

```{r}
tmap_mode("plot")
tm_shape(acc_Hansen,
         bbox = mapex) + 
  tm_fill(col = "accHansen",
          n = 10,
          style = "quantile",
          border.col = "black",
          border.lwd = 1) +
tm_shape(tourism_sf) +
  tm_symbols(size = 0.1) +
  tm_layout(main.title = "Accessibility to eldercare: Hansen method",
            main.title.position = "center",
            main.title.size = 2,
            legend.outside = FALSE,
            legend.height = 0.45, 
            legend.width = 3.0,
            legend.format = list(digits = 6),
            legend.position = c("right", "top"),
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.5)
```
